package com.oroboks.entities;

import java.util.Date;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

/**
 * Entity for recording payments.
 * @author Aditya Narain
 */
@Entity
@Table(name = "ORO_PAYMENTS")
public class Payment extends BaseEntity {

    /**
     * Generates Serial Version
     */
    private static final long serialVersionUID = 6083435389116828718L;

    @NotNull
    @Column(name = "PAYMENT_ID")
    private String paymentId;

    @NotNull
    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "ORDER_ID")
    private Order orderId;

    @NotNull
    @Column(name = "TIMESTAMP")
    private Date timeStamp;

    @NotNull
    @Column(name = "PAYMENT_AMOUNT")
    private double paymentAmount;

    /**
     * Empty JPA constructor for Payment
     */
    public Payment() {
	/*
	 * EMPTY Constructor
	 */
    }

    /**
     * Javadoc for {@link Payment} from user.
     * @param paymentId Id of the payment generated from Stripe. Cannot be null or empty.
     * @param orderId Id of the {@link Order}. Cannoe be null.
     * @param timeStamp time when payment was processed.
     * @param paymentAmount Amount for which payment was made.
     */
    public Payment(String paymentId, Order orderId, Date timeStamp,
	    double paymentAmount) {
	if (paymentId == null || paymentId.trim().isEmpty()) {
	    throw new IllegalArgumentException(
		    "paymentId cannot be null or empty");
	}
	if (orderId == null) {
	    throw new IllegalArgumentException(
		    "orderId cannot be null or empty");
	}
	if (timeStamp == null) {
	    throw new IllegalArgumentException(
		    "timeStamp cannot be null or empty");
	}
	this.paymentId = paymentId;
	this.orderId = orderId;
	this.paymentAmount = paymentAmount;
    }

    /**
     * Gets the paymentId generated by Stripe.
     * @return non-null paymentId.
     */
    public String getPaymentId() {
	return paymentId;
    }

    /**
     * Sets the paymentId.
     * @param paymentId Id of the payment generated from Stripe. Cannot be null or empty.
     * @throws IllegalArgumentException if parameter conditions are not met.
     */
    public void setPaymentId(String paymentId) {
	if(paymentId == null || paymentId.trim().isEmpty()){
	    throw new IllegalArgumentException("paymentId cannot be null or empty");
	}
	this.paymentId = paymentId;
    }

    /**
     * Retrieves the associated orderId.
     * @return non-null orderId.
     */
    public Order getOrderId() {
	return orderId;
    }

    /**
     * Sets the orderId. Cannot be null.
     * @param orderId represents the id of the order for which payment is processed. Cannot be null.
     * @throws IllegalArgumentException if parameter conditions are not met.
     */
    public void setOrderId(Order orderId) {
	this.orderId = orderId;
    }

    /**
     * @return non-null timestamp.
     */
    public Date getTimeStamp() {
	return timeStamp;
    }

    /**
     * Sets the timestamp. Cannot be null.
     * @param timeStamp timeStamp when payment is processed. Cannot be null.
     * @throws IllegalArgumentException if parameter conditions are not met.
     */
    public void setTimeStamp(Date timeStamp) {
	this.timeStamp = timeStamp;
    }

    /**
     * @return amount charged.
     */
    public double getPaymentAmount() {
	return paymentAmount;
    }

    /**
     * Sets the amount to be charged.
     * @param paymentAmount Amount to be processed for the user.
     */
    public void setPaymentAmount(double paymentAmount) {
	this.paymentAmount = paymentAmount;
    }

}
